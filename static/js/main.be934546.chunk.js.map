{"version":3,"sources":["logo.svg","components/navbar.js","components/main.js","components/footer.js","Myportfolio.js","serviceWorker.js","index.js"],"names":["module","exports","Navigationbar","Navbar","fixed","className","variant","bg","expand","Brand","href","src","Logo","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Component","main","class","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Myportfolio","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,wTC4C5BC,G,6KAjCP,OACQ,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,UAAU,6CAA6CC,QAAQ,OAAOC,GAAG,OAAOC,OAAO,MAC3G,kBAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,SACnB,yBACZC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPT,UAAU,2BACVU,IAAI,yBANQ,sBASA,kBAACZ,EAAA,EAAOa,OAAR,CAAeC,gBAAc,qBAC7B,kBAACd,EAAA,EAAOe,SAAR,CAAiBC,GAAG,oBACpB,kBAACC,EAAA,EAAD,CAAKf,UAAU,WACf,kBAACe,EAAA,EAAIC,KAAL,CAAUX,KAAK,SAAf,QACA,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,SAAf,QACd,kBAACU,EAAA,EAAIC,KAAL,CAAUX,KAAK,KAAf,iBACA,kBAACY,EAAA,EAAD,CAAaC,MAAM,WAAWJ,GAAG,sBAC/B,kBAACG,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,UACA,kBAACY,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,kBACA,kBAACY,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,aACA,kBAACY,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,2B,GAzBoBgB,cCYbC,G,6KAhBP,OACI,yBAAKtB,UAAU,kBACX,yBAAKuB,MAAM,aACzB,iCACA,iCACA,iCACA,iCACA,kCAEc,yBAAKvB,UAAU,SAAQ,0CAAe,0BAAMA,UAAU,OAAhB,Y,GAXnCqB,cCkBJG,G,6KAfX,OACI,6BACI,gCACA,yBAAKD,MAAM,aACP,qJAEI,qF,GARCF,cCYNI,MAVf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be934546.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Logo from '../logo.svg';\r\nimport './navbar.css';\r\n\r\n\r\nclass Navigationbar extends Component {\r\n    render(){\r\n        return(\r\n                <div>\r\n                    <Navbar fixed=\"top\" className=\"container-fluid navbar-fixed navbar-margin\" variant=\"dark\" bg=\"dark\" expand=\"lg\" >\r\n                    <Navbar.Brand href=\"#home\">\r\n                    <img\r\n        src={Logo}\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n        alt=\"React Bootstrap logo\"\r\n      />\r\n      Deepak suryawanshi</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#link\">Link</Nav.Link>\r\n      <Nav.Link href=\"#\"> Social links</Nav.Link>\r\n      <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\" >\r\n        <NavDropdown.Item href=\"#action/3.1\" >Action</NavDropdown.Item>\r\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n        <NavDropdown.Divider />\r\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n      </NavDropdown>\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigationbar;","import React , {Component} from 'react';\r\nimport './main.css';\r\n\r\nclass main extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"container-main\">\r\n                <div class=\"crossfade\">\r\n  <figure></figure>\r\n  <figure></figure>\r\n  <figure></figure>\r\n  <figure></figure>\r\n  <figure></figure>\r\n</div>\r\n                <div className=\"greet\"><h1>Hello world<span className=\"dot\">.</span></h1>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default main;","import React, {Component} from 'react';\r\nimport './footer.css';\r\n\r\n\r\nclass footer extends Component{\r\nrender(){\r\n    return(\r\n        <div>\r\n            <footer>\r\n            <div class=\"container\">\r\n                <h6>“Copyright © Deepak Suryawanshi. All Rights\r\n                    Reserved” | “Contact Us: Email: - deepaksy28@gmail.com\"</h6>\r\n                    <h6>Note: - This page is made with React-Bootstap.</h6>\r\n            </div>\r\n        </footer>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\n\r\nexport default footer;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Main from './components/main';\nimport Footer from './components/footer'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Myportfolio from './Myportfolio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Myportfolio />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}